@page "/"
@using DataPositionSimulator.data
<button @onclick="upload">1. upload data</button>
<button @onclick="move">2. move</button><label style="width:8px;"></label><label style="width:80px;background-color:indianred;color:aliceblue">@distanceBetween</label><label style="width:8px;"></label><label style="background-color:aliceblue;color:green">@appointmentInformation</label>
<RealTimeMap @ref="realTimeMap" height="620px" width="1000px"></RealTimeMap>
@code {
    RealTimeMap? realTimeMap;
    string appointmentInformation = "";
    string distanceBetween = "";

    public async Task upload()
    {
        //upload data in the map
        defaultAppearace();
        if (realTimeMap != null)
        {
            await realTimeMap.Geometric.Points.upload(new InputData().input);

            var analysis = realTimeMap.Geometric.Points.Analysis(item => true);
            analysis.nearby = new RealTimeMap.NearbyAnalysis()
                {
                    threshold = 30,
                    unit = RealTimeMap.UnitOfMeasure.meters
                };
            analysis.OnNearbyThresholdFired += onNearbyThresholdTrigger;
            analysis.OnNearbyThresholdClosed += nearbyThresholdTriggerClosed;
        }
        appointmentInformation = "";
    }


    public void defaultAppearace()
    {
        //the default appearance of the points depending on the type, ex:
        // - police crew -> fillColor "#d8bfd8"
        if (realTimeMap != null)
        {
            realTimeMap.Geometric.Points.Appearance(item => item.type == "intervention crew").pattern = new RealTimeMap.PointSymbol()
                {
                    color = "#800080",
                    fillColor = "#9932cc",
                    fillOpacity = 0.5,
                    weight = 2,
                    opacity = 1,
                    radius = 10
                };
            realTimeMap.Geometric.Points.Appearance(item => item.type == "suspicious vehicle").pattern = new RealTimeMap.PointSymbol()
                {
                    color = "blue",
                    fillColor = "#4682b4",
                    fillOpacity = 0.5,
                    weight = 2,
                    opacity = 1,
                    radius = 10
                };
            realTimeMap.Geometric.Points.Appearance(item => item.type == "ambulance").pattern = new RealTimeMap.PointSymbol()
                {
                    color = "#648c11",
                    fillColor = "#bfff00",
                    fillOpacity = 0.5,
                    weight = 2,
                    opacity = 1,
                    radius = 10
                };
            realTimeMap.Geometric.Points.Appearance(item => item.type == "police crew").pattern = new RealTimeMap.PointSymbol()
                {
                    color = "#000080",
                    fillColor = "#d8bfd8",
                    fillOpacity = 0.5,
                    weight = 2,
                    opacity = 1,
                    radius = 10
                };
        }
    }

    public void nearbyThresholdTriggerClosed(object sender)
    {
        //when the approach (nearby) between two or more points has closed
        if (realTimeMap != null)
        {
            Task.Run(async () =>
            {
                await realTimeMap.Geometric.DisplayPointsFromArray.deleteAll();
            });

            Task.Run(async () =>
            {//we delete the measurement lines
                await realTimeMap.Geometric.DisplayPolylinesFromArray.deleteMeasure();
            });
            appointmentInformation = "";
            distanceBetween = "";
            StateHasChanged();
        }
    }
   
    public async void onNearbyThresholdTrigger(object sender, RealTimeMap.NearbyThresholdArgs args)
    {
        if (realTimeMap == null)
            return;
        await realTimeMap.Geometric.DisplayPolylinesFromArray.deleteMeasure();
        await realTimeMap.Geometric.DisplayPointsFromArray.deleteAll();
        if (args.tuples == null)
            return;
        foreach (var item in args.tuples)
        {
            if (item.tuple == null)
                return;
            //we highlight the points that are close (to each other)
            await realTimeMap.Geometric.DisplayPointsFromArray.add(new double[2] { item.tuple.Item1.latitude, item.tuple.Item1.longitude }, new RealTimeMap.PointSymbol()
                {
                    color = "yellow",
                    fillColor = "yellow",
                    opacity = 0.8,
                    fillOpacity = 0,
                    radius = 12,
                    weight = 2

                });
            //we add a measuring line with the distance
            await realTimeMap.Geometric.DisplayPolylinesFromArray.addMeasure(new RealTimeMap.MeasureLine()
                {
                    start = new double[2] { item.tuple.Item1.latitude, item.tuple.Item1.longitude },
                    end = new double[2] { item.tuple.Item2.latitude, item.tuple.Item2.longitude },
                    text = $"{Math.Round(item.distance, 1).ToString()} m",
                    textAnchor = new double[2] { -2, 8 },
                    labelStyle = "min-width:40px;height:100%;background-color:#084886;border-radius:6px;color:#d2efff;text-align:center;font-size:10px;"

                });

        }
        
    }
    public async Task move()
    {
        if(realTimeMap!=null)
            if(realTimeMap.Geometric.Points.getItems().Count()==0)
            {
                appointmentInformation = "upload the data first";
                return;
            }
        //the points movement simulator
        for (int i = 0; i < new InputData().move1.Count(); i++)
        {
            var pct1 = new InputData().move1[i];
            var pct2 = new InputData().move2[i];
            var pct3 = new InputData().move3[i];
            var pct4 = new InputData().move4[i];
            if (realTimeMap != null)
            {
                await realTimeMap.Geometric.Points.moveTo((new List<RealTimeMap.StreamPoint>() { pct1, pct3, pct4 }).ToArray());
            }
            var timeDelay = 600;
            if (i > 2 && i < 8 )
                timeDelay = 3000;

            await Task.Delay(timeDelay);

        }
    }
}
